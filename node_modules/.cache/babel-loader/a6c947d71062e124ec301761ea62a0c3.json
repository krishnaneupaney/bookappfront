{"ast":null,"code":"import _toConsumableArray from\"/Users/krishnaneupaney/Desktop/projects/Books_Project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{FETCH_ALL,CREATE,UPDATE,DELETE}from'../constants/actionTypes';export default(function(){var posts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case DELETE:return posts.filter(function(post){return post._id===action.payload;});case UPDATE:return posts.map(function(post){return post._id===action.payload._id?action.payload:post;});// case 'LIKE':\n//     return posts.map((post) => post._id === action.payload._id ? action.payload : post )    \ncase FETCH_ALL:return action.payload;case CREATE:return[].concat(_toConsumableArray(posts),[action.payload]);default:return posts;}});","map":{"version":3,"sources":["/Users/krishnaneupaney/Desktop/projects/Books_Project/client/src/reducers/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","posts","action","type","filter","post","_id","payload","map"],"mappings":"2LACA,OAAWA,SAAX,CAAsBC,MAAtB,CAA8BC,MAA9B,CAAsCC,MAAtC,KAAoD,0BAApD,CAEA,eAAe,UAAwB,IAAvBC,CAAAA,KAAuB,2DAAf,EAAe,IAAXC,CAAAA,MAAW,2CACpC,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKH,CAAAA,MAAL,CACK,MAAOC,CAAAA,KAAK,CAACG,MAAN,CAAa,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaJ,MAAM,CAACK,OAA9B,EAAb,CAAP,CACL,IAAKR,CAAAA,MAAL,CACI,MAAOE,CAAAA,KAAK,CAACO,GAAN,CAAU,SAACH,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,CAAkCJ,MAAM,CAACK,OAAzC,CAAmDF,IAA7D,EAAV,CAAP,CACH;AACA;AACD,IAAKR,CAAAA,SAAL,CACI,MAAOK,CAAAA,MAAM,CAACK,OAAd,CACH,IAAKT,CAAAA,MAAL,CACI,mCAAWG,KAAX,GAAkBC,MAAM,CAACK,OAAzB,GACJ,QACI,MAAON,CAAAA,KAAP,CAZT,CAcF,CAfD","sourcesContent":["\nimport {   FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\n\nexport default (posts = [], action) => {\n   switch (action.type) {\n       case DELETE: \n            return posts.filter((post) => post._id === action.payload);\n       case UPDATE:\n           return posts.map((post) => post._id === action.payload._id ? action.payload : post )\n        // case 'LIKE':\n        //     return posts.map((post) => post._id === action.payload._id ? action.payload : post )    \n       case FETCH_ALL:\n           return action.payload;\n        case CREATE:\n            return [...posts, action.payload];\n        default: \n            return posts;\n   }\n}"]},"metadata":{},"sourceType":"module"}